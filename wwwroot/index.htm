<!DOCTYPE html>
<html lang='en'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>My Web App</title>
    <link rel="stylesheet" href="css/app.css" />

    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Inter:300,400,500,600,700" />

    <link href="css/prismjs.bundle.css" rel="stylesheet" type="text/css" />
    <link href="css/plugins.bundle.css" rel="stylesheet" type="text/css" />
    <link href="css/style.bundle.css" rel="stylesheet" type="text/css" />

    <!--https://github.com/aarsteinmedia/dotlottie-player-->
    <script src="https://unpkg.com/@aarsteinmedia/dotlottie-player@latest/dist/index.js"></script>
    <style>
        #progress-container {
            width: 100%;
            background-color: #ddd;
        }

        #progress-bar {
            width: 0;
            height: 30px;
            background-color: #4caf50;
        }
    </style>
</head>
<body>
    <div class="principal">

        <h1 class="fs-3x">
            <span class="d-inline-block mb-2 fs-2tx fw-bold">
                Instalador GbExpedição
            </span>
            <span class="d-inline-block position-absolute h-1px bottom-0 end-0 start-0 bg-primary translate rounded"></span>
        </h1>

        <div class="w-25 m-auto">
            <dotlottie-player src="images/file-downloading.json"
                              background="transparent"
                              speed="1"
                              style="height: 30px;"
                              direction="1"
                              playMode="normal"
                              loop
                              autoplay>
            </dotlottie-player>
        </div>


        <button class="primary" onclick="connectWebSocket();">ENVIAR</button>

        <p class="m-0 text-center fw-bold" id="progresso">

        </p>
        <div class="progress">
            <span class="progress-bar progress-bar-striped progress-bar-animated " role="progressbar" style="width: @Progresso%" aria-valuenow="Progresso" aria-valuemin="0" aria-valuemax="293"></span>
        </div>
        <p class="m-0 text-center">
            @Status
        </p>

        <div id="progress-container">
            <div id="progress-bar"></div>
        </div>
        <p id="progress-text">0%</p>

    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            console.log('PRONTO');
            Init();
            //fetchData();
            //connectWebSocket();
        });

        async function fetchProgress() {
            try {
                const response = await fetch('http://127.0.0.1:1234/api/progress');
                const progress = await response.json();
                document.getElementById('progress-bar').style.width = progress + '%';
                document.getElementById('progress-text').textContent = progress + '%';
            } catch (error) {
                console.error('Error fetching progress:', error);
            }
        }

        setInterval(fetchProgress, 1000); // Atualiza a cada segundo

        async function fetchData() {
            const response = await fetch('http://127.0.0.1:1234/api/data');
            const reader = response.body.getReader();
            const decoder = new TextDecoder();

            while (true) {
                const { done, value } = await reader.read();
                if (done) {
                    console.log('No more data');
                    break;
                }
                const chunk = decoder.decode(value, { stream: true });
                console.log('Received chunk:', chunk);
            }
        }


        function Init() {
            const xhr = new XMLHttpRequest();
            xhr.responseType = 'json';
            xhr.open('POST', 'http://127.0.0.1:1234/api/init', true);
            xhr.onreadystatechange = () => {
                if (xhr.readyState == XMLHttpRequest.DONE) {
                    if (xhr.status != 200) {
                        console.log('Error' + xhr.status + ' (' + xhr.statusText + ')');
                    } else {
                        var response = xhr.response;

                        console.log("xhr = " + xhr)
                        console.log("xhr = " + xhr.responseType);
                        console.log("xhr = " + xhr.status);
                        console.log("xhr = " + xhr.statusText);
                        console.log("sucesso = " + response.Successful)

                        if (!response.Successful) {
                            console.log("ERRO = " + response);
                        }
                        else {
                            console.log(response.Message);
                            //document.getElementById('progresso').innerText = response.Message;
                        }
                    }
                }
            }

            function chamadaInicialDoCSharp() {
                console.log("CHAMADA INICIAL DO CSHARP");
            }

            xhr.send(null);
        }

        async function fetchChunks() {
            try {
                let response = await fetch('http://127.0.0.1:1234/api/counter');
                if (response.ok) {
                    let chunks = await response.json();
                    console.log("Chunks: ", chunks);
                    document.getElementById("progresso").innerText = JSON.stringify(chunks);
                } else {
                    console.error('HTTP error', response.status);
                }
            } catch (error) {
                console.error('Fetch error: ', error);
            }
        }

        //window.onload = fetchChunks;


        function connectWebSocket() {
            const socket = new WebSocket('ws://127.0.0.1:1234/ws');

            socket.onopen = function (event) {
                console.log('WebSocket is open now.');
            };

            socket.onmessage = function (event) {
                const data = JSON.parse(event.data);
                console.log('Progress:', data.progress);
                document.getElementById("progress").innerText = `Progress: ${data.progress}%`;
            };

            socket.onclose = function (event) {
                console.log('WebSocket is closed now.');
            };

            socket.onerror = function (error) {
                console.error('WebSocket Error:', error);
            };
        }

        //window.onload = connectWebSocket;


    </script>

    <script src="js/plugins.bundle.js"></script>
    <script src="js/scripts.bundle.js"></script>
    <script src="js/prismjs.bundle.js"></script>
</body>
</html>